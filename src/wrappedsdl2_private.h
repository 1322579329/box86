#if defined(GO) && defined(GOM) && defined(GO2) && defined(DATA)

// _fini
// _init
GO(SDL_abs, iFi)
GO(SDL_acos, dFd)
GO(SDL_acosf, fFf)
// SDL_AddEventWatch
// SDL_AddHintCallback
GOM(SDL_AddTimer, pFEupp)
// SDL_AllocFormat
// SDL_AllocPalette
GO(SDL_AllocRW, pFv)    // no need to create a "my_" probably
GO(SDL_asin, dFd)
GO(SDL_asinf, fFf)
GO(SDL_atan, dFd)
GO(SDL_atan2, dFdd)
GO(SDL_atan2f, fFff)
GO(SDL_atanf, fFf)
GO(SDL_atof, dFp)
GO(SDL_atoi, iFp)
// SDL_AtomicAdd
// SDL_AtomicCAS
// SDL_AtomicCASPtr
// SDL_AtomicGet
// SDL_AtomicGetPtr
// SDL_AtomicLock
// SDL_AtomicSet
// SDL_AtomicSetPtr
// SDL_AtomicTryLock
// SDL_AtomicUnlock
// SDL_AudioInit
// SDL_AudioQuit
// SDL_AudioStreamAvailable
// SDL_AudioStreamClear
// SDL_AudioStreamFlush
// SDL_AudioStreamGet
// SDL_AudioStreamPut
// SDL_BuildAudioCVT
// SDL_CalculateGammaRamp
// SDL_calloc
// SDL_CaptureMouse
GO(SDL_ceil, dFd)
GO(SDL_ceilf, fFf)
// SDL_ClearError
// SDL_ClearHints
// SDL_ClearQueuedAudio
// SDL_CloseAudio
GO(SDL_CloseAudioDevice, vFi)
// SDL_ComposeCustomBlendMode
// SDL_CondBroadcast
GO(SDL_CondSignal, iFp)
GO(SDL_CondWait, iFpp)
GO(SDL_CondWaitTimeout, iFppu)
// SDL_ConvertAudio
// SDL_ConvertPixels
// SDL_ConvertSurface
// SDL_ConvertSurfaceFormat
// SDL_copysign
// SDL_copysignf
// SDL_cos
// SDL_cosf
// SDL_CreateColorCursor
GO(SDL_CreateCond, pFv)
// SDL_CreateCursor
GO(SDL_CreateMutex, pFv)
GO(SDL_CreateRenderer, pFpiu)
GO(SDL_CreateRGBSurface, pFuiiiuuuu)
// SDL_CreateRGBSurfaceFrom
// SDL_CreateRGBSurfaceWithFormat
// SDL_CreateRGBSurfaceWithFormatFrom
// SDL_CreateSemaphore
// SDL_CreateShapedWindow
GO(SDL_CreateSoftwareRenderer, pFp)
// SDL_CreateSystemCursor
GO(SDL_CreateTexture, pFpuiii)
GO(SDL_CreateTextureFromSurface, pFpp)
GOM(SDL_CreateThread, pFEppp)
// SDL_CreateThreadWithStackSize
GO(SDL_CreateWindow, pFpiiiiu)
// SDL_CreateWindowAndRenderer
// SDL_CreateWindowFrom
GO(SDL_Delay, vFu)
// SDL_DelEventWatch
// SDL_DelHintCallback
// SDL_DequeueAudio
GO(SDL_DestroyCond, vFp)
GO(SDL_DestroyMutex, vFp)
GO(SDL_DestroyRenderer, vFp)
// SDL_DestroySemaphore
GO(SDL_DestroyTexture, vFp)
GO(SDL_DestroyWindow, vFp)
GO(SDL_DetachThread, vFp)
GO(SDL_DisableScreenSaver, vFv)
// SDL_DuplicateSurface
// SDL_DYNAPI_entry
// SDL_EnableScreenSaver
// SDL_EnclosePoints
// SDL_Error
GO(SDL_EventState, CFui)
// SDL_exp
// SDL_expf
// SDL_fabs
// SDL_fabsf
GO(SDL_FillRect, iFppu)
// SDL_FillRects
// SDL_FilterEvents
// SDL_floor
// SDL_floorf
// SDL_FlushEvent
// SDL_FlushEvents
// SDL_fmod
// SDL_fmodf
GO(SDL_free, vFp)
// SDL_FreeAudioStream
// SDL_FreeCursor
// SDL_FreeFormat
// SDL_FreePalette
GOM(SDL_FreeRW, vFEp)
GO(SDL_FreeSurface, vFp)
// SDL_FreeWAV
// SDL_GameControllerAddMapping
GOM(SDL_GameControllerAddMappingsFromRW, iFEpi)
GO(SDL_GameControllerClose, vFp)
GO(SDL_GameControllerEventState, iFi)
// SDL_GameControllerFromInstanceID
GO(SDL_GameControllerGetAttached, iFp)
GO(SDL_GameControllerGetAxis, iFpi)
// SDL_GameControllerGetAxisFromString
// SDL_GameControllerGetBindForAxis
// SDL_GameControllerGetBindForButton
GO(SDL_GameControllerGetButton, uFpi)
// SDL_GameControllerGetButtonFromString
GO(SDL_GameControllerGetJoystick, pFp)
// SDL_GameControllerGetPlayerIndex
// SDL_GameControllerGetProduct
// SDL_GameControllerGetProductVersion
// SDL_GameControllerGetStringForAxis
GO(SDL_GameControllerGetStringForButton, pFu)
// SDL_GameControllerGetVendor
// SDL_GameControllerMapping
// SDL_GameControllerMappingForDeviceIndex
// SDL_GameControllerMappingForGUID
// SDL_GameControllerMappingForIndex
// SDL_GameControllerName
// SDL_GameControllerNameForIndex
// SDL_GameControllerNumMappings
GO(SDL_GameControllerOpen, pFi)
// SDL_GameControllerRumble
// SDL_GameControllerUpdate
// SDL_GetAssertionHandler
// SDL_GetAssertionReport
// SDL_GetAudioDeviceName
// SDL_GetAudioDeviceStatus
// SDL_GetAudioDriver
// SDL_GetAudioStatus
GO(SDL_GetBasePath, pFv)
// SDL_GetClipboardText
// SDL_GetClipRect
// SDL_GetClosestDisplayMode
GO(SDL_GetColorKey, iFpp)
// SDL_GetCPUCacheLineSize
// SDL_GetCPUCount
// SDL_GetCurrentAudioDriver
GO(SDL_GetCurrentDisplayMode, iFip)
// SDL_GetCurrentVideoDriver
// SDL_GetCursor
// SDL_GetDefaultAssertionHandler
// SDL_GetDefaultCursor
GO(SDL_GetDesktopDisplayMode, iFip)
// SDL_GetDisplayBounds
// SDL_GetDisplayDPI
// SDL_GetDisplayMode
// SDL_GetDisplayName
// SDL_GetDisplayOrientation
// SDL_GetDisplayUsableBounds
// SDL_getenv
GO(SDL_GetError, pFv)
// SDL_GetEventFilter
// SDL_GetGlobalMouseState
// SDL_GetGrabbedWindow
// SDL_GetHint
// SDL_GetHintBoolean
GO(SDL_GetKeyboardFocus, pFv)
// SDL_GetKeyboardState
// SDL_GetKeyFromName
// SDL_GetKeyFromScancode
GO(SDL_GetKeyName, pFu)
// SDL_GetMemoryFunctions
// SDL_GetModState
// SDL_GetMouseFocus
GO(SDL_GetMouseState, uFpp)
// SDL_GetNumAllocations
// SDL_GetNumAudioDevices
// SDL_GetNumAudioDrivers
// SDL_GetNumDisplayModes
// SDL_GetNumRenderDrivers
// SDL_GetNumTouchDevices
// SDL_GetNumTouchFingers
// SDL_GetNumVideoDisplays
// SDL_GetNumVideoDrivers
GO(SDL_GetPerformanceCounter, UFv)
GO(SDL_GetPerformanceFrequency, UFv)
// SDL_GetPixelFormatName
// SDL_GetPlatform
// SDL_GetPowerInfo
GO(SDL_GetPrefPath, pFpp)
// SDL_GetQueuedAudioSize
// SDL_GetRelativeMouseMode
// SDL_GetRelativeMouseState
GO(SDL_GetRenderDrawBlendMode, iFpp)
// SDL_GetRenderDrawColor
// SDL_GetRenderDriverInfo
// SDL_GetRenderer
GO(SDL_GetRendererInfo, iFpp)
// SDL_GetRendererOutputSize
// SDL_GetRenderTarget
// SDL_GetRevision
// SDL_GetRevisionNumber
GO(SDL_GetRGB, vFupppp)
GO(SDL_GetRGBA, vFuppppp)
// SDL_GetScancodeFromKey
// SDL_GetScancodeFromName
// SDL_GetScancodeName
// SDL_GetShapedWindowMode
// SDL_GetSurfaceAlphaMod
// SDL_GetSurfaceBlendMode
// SDL_GetSurfaceColorMod
// SDL_GetSystemRAM
// SDL_GetTextureAlphaMod
GO(SDL_GetTextureBlendMode, iFpp)
// SDL_GetTextureColorMod
GO(SDL_GetThreadID, uFp)
// SDL_GetThreadName
GO(SDL_GetTicks, uFv)
// SDL_GetTouchDevice
// SDL_GetTouchDeviceType
// SDL_GetTouchFinger
// SDL_GetVersion
// SDL_GetVideoDriver
// SDL_GetWindowBordersSize
// SDL_GetWindowBrightness
// SDL_GetWindowData
// SDL_GetWindowDisplayIndex
// SDL_GetWindowDisplayMode
// SDL_GetWindowFlags
// SDL_GetWindowFromID
// SDL_GetWindowGammaRamp
// SDL_GetWindowGrab
// SDL_GetWindowID
// SDL_GetWindowMaximumSize
// SDL_GetWindowMinimumSize
// SDL_GetWindowOpacity
// SDL_GetWindowPixelFormat
// SDL_GetWindowPosition
GO(SDL_GetWindowSize, vFppp)
// SDL_GetWindowSurface
// SDL_GetWindowTitle
// SDL_GetWindowWMInfo
// SDL_GetYUVConversionMode
// SDL_GetYUVConversionModeForResolution
// SDL_GL_BindTexture
GO(SDL_GL_CreateContext, pFp)
GO(SDL_GL_DeleteContext, vFp)
// SDL_GL_ExtensionSupported
// SDL_GL_GetAttribute
// SDL_GL_GetCurrentContext
// SDL_GL_GetCurrentWindow
GO(SDL_GL_GetDrawableSize, vFppp)
// SDL_GL_GetProcAddress
// SDL_GL_GetSwapInterval
GO(SDL_GL_LoadLibrary, iFp)
GO(SDL_GL_MakeCurrent, iFpp)
// SDL_GL_ResetAttributes
GO(SDL_GL_SetAttribute, iFui)
GO(SDL_GL_SetSwapInterval, iFi)
GO(SDL_GL_SwapWindow, vFp)
// SDL_GL_UnbindTexture
// SDL_GL_UnloadLibrary
GO(SDL_HapticClose, vFp)
GO(SDL_HapticDestroyEffect, vFpi)
// SDL_HapticEffectSupported
// SDL_HapticGetEffectStatus
// SDL_HapticIndex
// SDL_HapticName
GO(SDL_HapticNewEffect, iFpp)
// SDL_HapticNumAxes
// SDL_HapticNumEffects
// SDL_HapticNumEffectsPlaying
// SDL_HapticOpen
// SDL_HapticOpened
GO(SDL_HapticOpenFromJoystick, pFp)
// SDL_HapticOpenFromMouse
// SDL_HapticPause
GO(SDL_HapticQuery, uFp)
GO(SDL_HapticRumbleInit, iFp)
GO(SDL_HapticRumblePlay, iFpfu)
GO(SDL_HapticRumbleStop, iFp)
GO(SDL_HapticRumbleSupported, iFp)
GO(SDL_HapticRunEffect, iFpiu)
// SDL_HapticSetAutocenter
// SDL_HapticSetGain
// SDL_HapticStopAll
GO(SDL_HapticStopEffect, iFpi)
// SDL_HapticUnpause
GO(SDL_HapticUpdateEffect, iFpip)
GOM(SDL_Has3DNow, iFv)
GOM(SDL_HasAltiVec, iFv)
GOM(SDL_HasAVX, iFv)
GOM(SDL_HasAVX2, iFv)
GOM(SDL_HasAVX512F, iFv)
GO(SDL_HasClipboardText, iFv)
GO(SDL_HasColorKey, iFv)
GO(SDL_HasEvent, iFv)
GO(SDL_HasEvents, iFv)
GO(SDL_HasIntersection, iFv)
GOM(SDL_HasMMX, iFv)
GOM(SDL_HasNEON, iFv)
GOM(SDL_HasRDTSC, iFv)
GO(SDL_HasScreenKeyboardSupport, iFv)
GOM(SDL_HasSSE, iFv)
GOM(SDL_HasSSE2, iFv)
GOM(SDL_HasSSE3, iFv)
GOM(SDL_HasSSE41, iFv)
GOM(SDL_HasSSE42, iFv)
// SDL_HideWindow
// SDL_iconv
// SDL_iconv_close
// SDL_iconv_open
// SDL_iconv_string
GO(SDL_Init, iFu)
GO(SDL_InitSubSystem, iFu)
// SDL_IntersectRect
// SDL_IntersectRectAndLine
// SDL_isdigit
GO(SDL_IsGameController, iFi)
// SDL_IsScreenKeyboardShown
// SDL_IsScreenSaverEnabled
// SDL_IsShapedWindow
// SDL_isspace
// SDL_IsTablet
// SDL_IsTextInputActive
// SDL_itoa
GO(SDL_JoystickClose, vFp)
// SDL_JoystickCurrentPowerLevel
GO(SDL_JoystickEventState, iFi)
// SDL_JoystickFromInstanceID
// SDL_JoystickGetAttached
// SDL_JoystickGetAxis
// SDL_JoystickGetAxisInitialState
// SDL_JoystickGetBall
// SDL_JoystickGetButton
GO(SDL_JoystickGetDeviceGUID, pFpi)  // return a struct that is "uint8_t data[16]" => there is hidden 1st arg with address of return buffer, same for ARM
// SDL_JoystickGetDeviceInstanceID
// SDL_JoystickGetDevicePlayerIndex
// SDL_JoystickGetDeviceProduct
// SDL_JoystickGetDeviceProductVersion
// SDL_JoystickGetDeviceType
// SDL_JoystickGetDeviceVendor
// SDL_JoystickGetGUID
// SDL_JoystickGetGUIDFromString
// SDL_JoystickGetGUIDString
// SDL_JoystickGetHat
// SDL_JoystickGetPlayerIndex
// SDL_JoystickGetProduct
// SDL_JoystickGetProductVersion
// SDL_JoystickGetType
// SDL_JoystickGetVendor
GO(SDL_JoystickInstanceID, iFp)
GO(SDL_JoystickIsHaptic, iFp)
// SDL_JoystickName
GO(SDL_JoystickNameForIndex, pFi)
// SDL_JoystickNumAxes
// SDL_JoystickNumBalls
// SDL_JoystickNumButtons
// SDL_JoystickNumHats
GO(SDL_JoystickOpen, pFi)
// SDL_JoystickRumble
// SDL_JoystickUpdate
// SDL_LinuxSetThreadPriority
// SDL_lltoa
GOM(SDL_LoadBMP_RW, pFEpi)
// SDL_LoadDollarTemplates
GOM(SDL_LoadFile_RW, pFEppi)
// SDL_LoadFunction
// SDL_LoadObject
GOM(SDL_LoadWAV_RW, pFEpippp)
// SDL_LockAudio
GO(SDL_LockAudioDevice, vFi)
// SDL_LockJoysticks
GO(SDL_LockMutex, iFp)
GO(SDL_LockSurface, iFp)
// SDL_LockTexture
// SDL_log
// SDL_Log
// SDL_log10
// SDL_log10f
// SDL_LogCritical
// SDL_LogDebug
// SDL_LogError
// SDL_logf
// SDL_LogGetOutputFunction
// SDL_LogGetPriority
// SDL_LogInfo
// SDL_LogMessage
// SDL_LogMessageV
// SDL_LogResetPriorities
// SDL_LogSetAllPriority
GOM(SDL_LogSetOutputFunction, vFEpp)
// SDL_LogSetPriority
// SDL_LogVerbose
// SDL_LogWarn
// SDL_LowerBlit
// SDL_LowerBlitScaled
// SDL_ltoa
// SDL_malloc
GO(SDL_MapRGB, uFpCCC)
GO(SDL_MapRGBA, uFpCCCC)
// SDL_MasksToPixelFormatEnum
// SDL_MaximizeWindow
// SDL_memcmp
// SDL_memcpy
// SDL_memmove
// SDL_MemoryBarrierAcquireFunction
// SDL_MemoryBarrierReleaseFunction
GO(SDL_memset, pFpiu)
// SDL_MinimizeWindow
// SDL_MixAudio
// SDL_MixAudioFormat
// SDL_MouseIsHaptic
// SDL_NewAudioStream
// SDL_NumHaptics
GO(SDL_NumJoysticks, iFv)
// SDL_NumSensors
GOM(SDL_OpenAudio, iFEpp)
GOM(SDL_OpenAudioDevice, iFEpippi)
// SDL_PauseAudio
GO(SDL_PauseAudioDevice, vFii)
// SDL_PeepEvents
// SDL_PixelFormatEnumToMasks
GO(SDL_PollEvent, iFp)
// SDL_pow
// SDL_powf
GO(SDL_PumpEvents, vFv)
GO(SDL_PushEvent, iFp)
// SDL_qsort
// SDL_QueryTexture
// SDL_QueueAudio
GO(SDL_Quit, vFv)
// SDL_QuitSubSystem
// SDL_RaiseWindow
GOM(SDL_ReadBE16, uFp)
GOM(SDL_ReadBE32, uFp)
GOM(SDL_ReadBE64, UFp)
GOM(SDL_ReadLE16, uFp)
GOM(SDL_ReadLE32, uFp)
GOM(SDL_ReadLE64, UFp)
GOM(SDL_ReadU8, uFp)
// SDL_realloc
// SDL_RecordGesture
// SDL_RegisterEvents
GOM(SDL_RemoveTimer, iFEp)
GO(SDL_RenderClear, iFp)
GO(SDL_RenderCopy, iFpppp)
// SDL_RenderCopyEx
// SDL_RenderCopyExF
// SDL_RenderCopyF
GO(SDL_RenderDrawLine, iFpiiii)
// SDL_RenderDrawLineF
// SDL_RenderDrawLines
// SDL_RenderDrawLinesF
// SDL_RenderDrawPoint
// SDL_RenderDrawPointF
// SDL_RenderDrawPoints
// SDL_RenderDrawPointsF
// SDL_RenderDrawRect
// SDL_RenderDrawRectF
// SDL_RenderDrawRects
// SDL_RenderDrawRectsF
GO(SDL_RenderFillRect, iFpp)
// SDL_RenderFillRectF
// SDL_RenderFillRects
// SDL_RenderFillRectsF
// SDL_RenderFlush
GO(SDL_RenderGetClipRect, vFpp)
// SDL_RenderGetIntegerScale
// SDL_RenderGetLogicalSize
// SDL_RenderGetMetalCommandEncoder
// SDL_RenderGetMetalLayer
// SDL_RenderGetScale
// SDL_RenderGetViewport
// SDL_RenderIsClipEnabled
GO(SDL_RenderPresent, vFp)
// SDL_RenderReadPixels
GO(SDL_RenderSetClipRect, iFpp)
// SDL_RenderSetIntegerScale
// SDL_RenderSetLogicalSize
GO(SDL_RenderSetScale, iFpff)
GO(SDL_RenderSetViewport, iFpp)
// SDL_RenderTargetSupported
// SDL_ReportAssertion
// SDL_ResetAssertionReport
// SDL_RestoreWindow
GOM(SDL_RWFromConstMem, pFEpi)
GOM(SDL_RWFromFP, pFEpi)
GOM(SDL_RWFromFile, pFEpp)
GOM(SDL_RWFromMem, pFEpi)
// SDL_SaveAllDollarTemplates
GOM(SDL_SaveBMP_RW, iFEppi)
// SDL_SaveDollarTemplate
// SDL_scalbn
// SDL_scalbnf
// SDL_SemPost
// SDL_SemTryWait
// SDL_SemValue
// SDL_SemWait
// SDL_SemWaitTimeout
// SDL_SensorClose
// SDL_SensorFromInstanceID
// SDL_SensorGetData
// SDL_SensorGetDeviceInstanceID
// SDL_SensorGetDeviceName
// SDL_SensorGetDeviceNonPortableType
// SDL_SensorGetDeviceType
// SDL_SensorGetInstanceID
// SDL_SensorGetName
// SDL_SensorGetNonPortableType
// SDL_SensorGetType
// SDL_SensorOpen
// SDL_SensorUpdate
// SDL_SetAssertionHandler
// SDL_SetClipboardText
// SDL_SetClipRect
GO(SDL_SetColorKey, iFpiu)
// SDL_SetCursor
// SDL_setenv
GO(SDL_SetError, iFppppp)    // it use ..., so putarbitrary  4 args
// SDL_SetEventFilter
// SDL_SetHint
// SDL_SetHintWithPriority
// SDL_SetMainReady
// SDL_SetMemoryFunctions
// SDL_SetModState
// SDL_SetPaletteColors
// SDL_SetPixelFormatPalette
// SDL_SetRelativeMouseMode
GO(SDL_SetRenderDrawBlendMode, iFpu)
GO(SDL_SetRenderDrawColor, iFpCCCC)
GO(SDL_SetRenderTarget, iFpp)
// SDL_SetSurfaceAlphaMod
// SDL_SetSurfaceBlendMode
// SDL_SetSurfaceColorMod
// SDL_SetSurfacePalette
// SDL_SetSurfaceRLE
// SDL_SetTextInputRect
GO(SDL_SetTextureAlphaMod, iFpC)
GO(SDL_SetTextureBlendMode, iFpu)
GO(SDL_SetTextureColorMod, iFpCCC)
// SDL_SetThreadPriority
// SDL_SetWindowBordered
// SDL_SetWindowBrightness
// SDL_SetWindowData
// SDL_SetWindowDisplayMode
GO(SDL_SetWindowFullscreen, iFpu)
// SDL_SetWindowGammaRamp
// SDL_SetWindowGrab
// SDL_SetWindowHitTest
GO(SDL_SetWindowIcon, vFpp)
// SDL_SetWindowInputFocus
// SDL_SetWindowMaximumSize
GO(SDL_SetWindowMinimumSize, vFpii)
// SDL_SetWindowModalFor
// SDL_SetWindowOpacity
GO(SDL_SetWindowPosition, vFpii)
// SDL_SetWindowResizable
// SDL_SetWindowShape
GO(SDL_SetWindowSize, vFpii)
// SDL_SetWindowTitle
// SDL_SetYUVConversionMode
GO(SDL_ShowCursor, iFi)
// SDL_ShowMessageBox
GO(SDL_ShowSimpleMessageBox, iFuppp)
GO(SDL_ShowWindow, vFp)
GO(SDL_sin, dFd)
GO(SDL_sinf, fFf)
GOM(SDL_snprintf, iFEpupVV)
// SDL_SoftStretch
GO(SDL_sqrt, dFd)
GO(SDL_sqrtf, fFf)
// SDL_sscanf
GO(SDL_StartTextInput, vFv)
GO(SDL_StopTextInput, vFv)
GO(SDL_strcasecmp, iFpp)
GO(SDL_strchr, pFpi)
GO(SDL_strcmp, iFpp)
GO(SDL_strdup, pFp)
GO(SDL_strlcat, uFppu)
GO(SDL_strlcpy, uFppu)
GO(SDL_strlen, uFp)
GO(SDL_strlwr, pFp)
GO(SDL_strncasecmp, iFppu)
GO(SDL_strncmp, iFppu)
GO(SDL_strrchr, pFpi)
GO(SDL_strrev, pFp)
GO(SDL_strstr, pFpp)
GO(SDL_strtod, dFpp)
GO(SDL_strtol, iFppi)
GO(SDL_strtoll, IFppi)
GO(SDL_strtoul, uFppi)
GO(SDL_strtoull, UFppi)
GO(SDL_strupr, pFp)
GO(SDL_tan, dFd)
GO(SDL_tanf, fFf)
GO(SDL_ThreadID, uFv)
// SDL_TLSCreate
// SDL_TLSGet
// SDL_TLSSet
// SDL_tolower
// SDL_toupper
// SDL_TryLockMutex
GO(SDL_uitoa, pFupi)
GO(SDL_ulltoa, pFUpi)
GO(SDL_ultoa, pFupi)
// SDL_UnionRect
// SDL_UnloadObject
// SDL_UnlockAudio
GO(SDL_UnlockAudioDevice, vFi)
// SDL_UnlockJoysticks
GO(SDL_UnlockMutex, iFp)
GO(SDL_UnlockSurface, vFp)
// SDL_UnlockTexture
// SDL_UpdateTexture
// SDL_UpdateWindowSurface
// SDL_UpdateWindowSurfaceRects
// SDL_UpdateYUVTexture
// SDL_UpperBlit
// SDL_UpperBlitScaled
// SDL_utf8strlcpy
// SDL_utf8strlen
// SDL_VideoInit
// SDL_VideoQuit
GOM(SDL_vsnprintf, iFEpupVV)
// SDL_vsscanf
// SDL_Vulkan_CreateSurface
// SDL_Vulkan_GetDrawableSize
// SDL_Vulkan_GetInstanceExtensions
// SDL_Vulkan_GetVkGetInstanceProcAddr
// SDL_Vulkan_LoadLibrary
// SDL_Vulkan_UnloadLibrary
// SDL_WaitEvent
// SDL_WaitEventTimeout
GO(SDL_WaitThread, vFpp)
// SDL_WarpMouseGlobal
GO(SDL_WarpMouseInWindow, vFpii)
GO(SDL_WasInit, uFu)
// SDL_wcscmp
// SDL_wcsdup
// SDL_wcslcat
// SDL_wcslcpy
// SDL_wcslen
GOM(SDL_WriteBE16, uFEpW)
GOM(SDL_WriteBE32, uFEpu)
GOM(SDL_WriteBE64, uFEpU)
GOM(SDL_WriteLE16, uFEpW)
GOM(SDL_WriteLE32, uFEpu)
GOM(SDL_WriteLE64, uFEpU)
GOM(SDL_WriteU8, uFEpu)

GO(SDL_doesntexist, IFpIi)

#endif